{"array":[{"date":"2018-08-08","title":"对百度广告的强烈控诉","url":"http://watermelon1gugu.github.io/2018/08/08/AccusationsOfBaidu/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近刚放暑假回家，却出了个幺蛾子导致我ubuntu系统所有数据连带系统全部丢失，“灾后重建”了三天，终于算是恢复正常。现在对导致本次事件的原因—百度广告，继续强烈控诉和谴责。<br>"},{"date":"2018-11-12","title":"记一次惨痛的笔试","url":"http://watermelon1gugu.github.io/2018/11/12/Aexamination/","content":"前言昨天做了今日头条的笔试，作为第一次参加正儿八经的笔试，有点紧张，有点糟糕，吸取教训，共勉。第一题给定一个数组 例如 （2 -1 3  4 5 -9 -2）将数组按照正负间隔输出 例如（2 -1 3 -9 4 -2 5），若有一方数字过多，将多出数字均放在末尾。\ncode：\n12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455import java.util.Scanner;public class Main2 &#123;    public..."},{"date":"2018-08-21","title":"在springBoot中整合JSP","url":"http://watermelon1gugu.github.io/2018/08/21/JSP/","content":"前言SpringBoot支持使用JSP，但官方并不推荐。\n配置application.properties1234# 页面默认前缀目录spring.mvc.view.prefix=/WEB-INF/view/# 响应页面默认后缀spring.mvc.view.suffix=.jsp\n加入依赖12345678910111213141516&lt;!-- jstl支持--&gt;&lt;dependency&gt;    &lt;groupId&gt;javax.servlet.jsp.jstl&lt;/groupId&gt;    &lt;artifactId&gt;jstl&lt;/artif..."},{"date":"2018-08-20","title":"在ubuntu18.04中使用TIM","url":"http://watermelon1gugu.github.io/2018/08/20/TIM/","content":"Github地址https://github.com/wszqkzqk/deepin-wine-ubuntu 个人感觉为目前最为成功的linux版TIM，尚未发现任何问题。\n安装\n在控制台输入 git clone https://github.com/wszqkzqk/deepin-wine-ubuntu.git 将项目克隆到本地\n\n进入deepin-wine-ubuntu文件夹 运行./install.sh \n\n进入http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.office/ 下载TIM最新deb包\n进入deb包..."},{"date":"2018-08-07","title":"Leetcode233 数字1的个数题解","url":"http://watermelon1gugu.github.io/2018/08/07/LeetCode233-countDigitOne/","content":"题目给定一个整数 n，计算所有小于等于 n 的非负整数中数字 1 出现的个数。示例:\n123输入: 13输出: 6 解释: 数字 1 出现在以下数字中: 1, 10, 11, 12, 13 。\n\n思路看到这道题的第一反应是用一种类似于筛法的方式,比如数字3虽然没有包含1,可以在数字3左右添加1构造出 31和13,似乎可以使用这种方式由一位数开始用递归将所有包含1的数字都构造出来.但是发现并不能很好解决数字重复的问题 以及包含1的数字的构造不是很好实现.于是作罢.\n进一步挖掘问题,一个数字每位数之间相互独立互不影响,我们可以先统计范围内个位数是1的数字有多少个.然后以此类推，其中又分为三种情况 ..."},{"date":"2018-08-08","title":"JVM-memory-model","url":"http://watermelon1gugu.github.io/2018/08/08/JVM-memory-model/","content":"JVM是Java开发的必备基础之一.在Java中JVM具有垃圾回收的机制,承担了对象的创建和释放内存的工作,使得开发者不需要像在C++里一样需要手动申请内存然后释放内存.否则会出现对象已经不再使用内存,内存空间却仍被占用的情况.\n内存模型\n以上为jvm内存模型,其中最主要的是java栈与java堆,其中里李存放各种对象实例而栈里存放最基本的数据类型和引用.\n这样做带来的好处是:\n\n栈存储了处理逻辑,堆存储了具体的数据,使得结构更为清晰.\n栈与堆分离,使得堆可以被多个栈共享.\n栈保存了上下文的信息,因此只能向上增长,而堆是动态分配.\n\n栈的大小可以通过-Xss设置,如果栈空间不足,会引起Stac..."},{"date":"2019-10-16","title":"easy py server 源码解析","url":"http://watermelon1gugu.github.io/2019/10/16/eps/","content":"太忙了 以后写..."},{"date":"2018-09-01","title":"进程间通信-管道(pipe)","url":"http://watermelon1gugu.github.io/2018/09/01/communication/","content":"进程间通信每个进程各自有不同的用户地址空间,任何一个进程的全局变量在另一个进程中都看不到，所以进程之间要交换数据必须通过内核,在内核中开辟一块缓冲区,进程A把数据从用户空间拷到内核缓冲区,进程B再从内核缓冲区把数据读走,内核提供的这种机制称为进程间通信。不同进程间的通信本质：进程之间可以看到一份公共资源；而提供这份资源的形式或者提供者不同，造成了通信方式不同，而 pipe就是提供这份公共资源的形式的一种。\n\n匿名管道管道的创建管道是由调用系统pipe()函数来创建\n123#include &lt;unistd.h&gt;int pipe (int fd[2]);//返回:成功返回0，出错返回-..."},{"date":"2019-02-17","title":"do{}while(0)的使用技巧","url":"http://watermelon1gugu.github.io/2019/02/17/dowhile-0/","content":"do{}while(0)的使用技巧避免宏定义错误在定义较为复杂的宏定义时，比如1#define DOSOMETHING() foo1();foo2();\n由于代码将会被展开（被当做两行）\n所以在面对\n12if(something)    DOSOMETHING();\n这种情况的时候会出现无论判断条件是什么，foo2()都会执行的问题。\n如果使用\n1#define DOSOMETHING() &#123;foo1();foo2();&#125;\n则展开后的代码为\n1234if(something)&#123;    foo1();    foo2();&#125;;\n大括号后面跟着一个分号，在老..."},{"date":"2018-08-07","title":"博客真好玩","url":"http://watermelon1gugu.github.io/2018/08/07/hello-world/","content":"咕咕咕 终于把博客搭起来了老早以前就想着要搭一个博客然后往里面写东西,但是居然咕咕咕到了现在.在国际周百无聊赖,什么事情都提不起干劲的情况下,居然对搭博客还有干劲.搭博客的目的主要是放一些平时学到想到的东西,或许还会记点事,毕竟也不知道放哪.\n..."},{"date":"2018-08-07","title":"my-hexo-dir-source-posts-hexo-YAMLException-cannot-read-a-block-mapping-entry-错误的解决办法","url":"http://watermelon1gugu.github.io/2018/08/07/hexo-YAMLException-cannot-read-a-block-mapping-entry-solution/","content":"my hexo dir/source/_posts/hexo-YAMLException-cannot-read-a-block-mapping-entry-错误的解决办法没想到在发出第一篇博文时就出现了问题,在运行了hexo g 后,显示了\nERROR Process failed: _posts/博客真好玩.md\nYAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 4, column 1:\n\n在删除了md文档内全部内容后却能成功生成,后来发..."},{"date":"2018-08-20","title":"isdc官网开发环境配置","url":"http://watermelon1gugu.github.io/2018/08/20/isdc-fork/","content":"isdc-ssm 后端官网后端使用SpringBoot + SpringMVC +MyBatis框架进行开发\nmysql执行以下指令\n12345sudo apt-get install mysql-serversudo apt-get isntall mysql-client sudo apt-get install libmysqlclient-dev\n如果系统为ubuntu18.04 参考Ubuntu18.04 Mysql无法登录问题解决方案进行进一步配置\n使用 mysql -u root -p 登录mysql后 执行指令 create database isdc character se..."},{"date":"2019-09-12","title":"jetbrain相关技巧","url":"http://watermelon1gugu.github.io/2019/09/12/jetbrain/","content":"设置自动插入文件头打开setting -&gt; File and Code Templates -&gt; 选择对应文件类型\n比如python部分写入\n12345#!/usr/bin/env python# -*- coding: utf-8 -*-# @Time    : $&#123;DATE&#125; $&#123;TIME&#125;# @Author  : archchen# @Description   :\n..."},{"date":"2018-08-08","title":"leetcode39-组合总和题解","url":"http://watermelon1gugu.github.io/2018/08/08/leetcode39/","content":"题目给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。candidates 中的数字可以无限制重复被选取。\n\n说明：\n\n所有数字（包括 target）都是正整数。\n解集不能包含重复的组合。 \n\n示例 1:\n123456输入: candidates = [2,3,6,7], target = 7,所求解集为:[  [7],  [2,2,3]]\n示例 2:\n1234567输入: candidates = [2,3,5], target = 8,所求解集为:[  [2,2,2,2],  [2,3,3]..."},{"date":"2019-01-07","title":"makefile学习笔记（持续更新）","url":"http://watermelon1gugu.github.io/2019/01/07/makefile/","content":"g++:-Wall : 输出所有的警告信息\n-O : 编译时进行优化\n-g : 表示编译debug版本\n-c : 只编程成目标文件\n1g++ -c file2.cpp\n-o : 输出\n1g++ file1.o file2.o -o helloworld\n-E 预处理\n1g++ -E helloworld.cpp -o helloworld.i\n-S 汇编文件\n1g++ -S helloworld.i -o helloworld.s\n-Lpath : 表示path目录中搜索库文件\n-Ipath : 表示在path目录中搜索头文件\n-ltest : 查找链接库\n1g++ -o main main...."},{"date":"2019-10-04","title":"(转载)learn-regex","url":"http://watermelon1gugu.github.io/2019/10/04/learn-regex/","content":"什么是正则表达式?正则表达式是一组由字母和符号组成的特殊文本, 它可以用来从文本中找出满足你想要的格式的句子.\n\n一个正则表达式是在一个主体字符串中从左到右匹配字符串时的一种样式.“Regular expression”这个词比较拗口, 我们常使用缩写的术语”regex”或”regexp”.正则表达式可以从一个基础字符串中根据一定的匹配模式替换文本中的字符串、验证表单、提取字符串等等.\n想象你正在写一个应用, 然后你想设定一个用户命名的规则, 让用户名包含字符,数字,下划线和连字符,以及限制字符的个数,好让名字看起来没那么丑.我们使用以下正则表达式来验证一个用户名:\n\n  \n\n以上的正则表达式..."},{"date":"2018-08-12","title":"leetcode-6 题解","url":"http://watermelon1gugu.github.io/2018/08/12/leetcode6/","content":"题目将字符串 &quot;PAYPALISHIRING&quot; 以Z字形排列成给定的行数：123P   A   H   NA P L S I I GY   I   R\n之后从左往右，逐行读取字符：&quot;PAHNAPLSIIGYIR&quot;\n实现一个将字符串进行指定行数变换的函数:\n1string convert(string s, int numRows);\n\n示例 1:\n12输入: s = &quot;PAYPALISHIRING&quot;, numRows = 3输出: &quot;PAHNAPLSIIGYIR&quot;\n示例 2:\n12345678输入: s = &qu..."},{"date":"2018-08-18","title":"使用ModelMapper实现对象到对象的映射","url":"http://watermelon1gugu.github.io/2018/08/18/modelMapper/","content":"为什么需要映射应用程序通常由相似但不同的对象模型组成，其中两个模型中的数据可能相似，但模型的结构和关注点不同。对象映射可以轻松地将一个模型转换为另一个模型，从而允许单独的模型保持隔离。\n为什么使用ModelMapperModelMapper的目标是通过基于约定自动确定一个对象模型如何映射到另一个对象映射，就像人类一样 - 同时提供一个简单的，重构安全的API来处理特定用例，从而使对象映射变得容易。\n智能ModelMapper分析您的对象模型，以智能地确定应如何映射数据。不需要手动映射。ModelMapper为您完成大部分工作，自动投影和展平复杂模型。\n重构安全ModelMapper提供了一个简..."},{"date":"2018-09-18","title":"浅谈信号量与互斥锁的区别和联系","url":"http://watermelon1gugu.github.io/2018/09/18/mutex-Semaphore/","content":"区别信号量与普通整型变量的区别信号量是整型变量（是否非负取决于其实现方式），除初始化以外，只能通过两个标准原子操作 wait，signal来访问。\n\n对信号量的操作被称为PV原语（不可中断、不可分割的程序），而普通整型变量可以在任何语句中被访问。\n\n\n\n信号量与互斥锁间的区别互斥：某一资源同时只允许一个访问者对其进行访问，具有唯一性和排它性。但互斥无法限制访问者的顺序，是无序的。\n同步：是指在互斥的基础上（大多数情况），通过其他机制（）实现访问者对资源的有序访问，大多数情况下，同步已经实现了互斥（比如对所有写入资源操作）。\n根本区别：互斥量用于线程的互斥，信号量用于线程的同步，互斥不能保证访问..."},{"date":"2018-08-18","title":"mybatis中使用通用mapper作为DAO层","url":"http://watermelon1gugu.github.io/2018/08/18/mapper/","content":"官方文档https://github.com/abel533/Mapper/wiki\n环境配置在pom.xml中添加\n12345&lt;dependency&gt;    &lt;groupId&gt;tk.mybatis&lt;/groupId&gt;    &lt;artifactId&gt;mapper-spring-boot-starter&lt;/artifactId&gt;    &lt;version&gt;2.0.3&lt;/version&gt;&lt;/dependency&gt;\n简单示例数据库有如下表：\n123456CREATE TABLE `country` (  `..."},{"date":"2018-08-19","title":"MyBatis框架基于Annotation注解的一对多关联映射","url":"http://watermelon1gugu.github.io/2018/08/19/mybatis-advanced-mapping/","content":"数据结构entity有Semester和Schedule 其中多个Schedule映射一个Semester 即一个Semester指向多个ScheduleSemester:\n1234567891011121314151617181920@Table(name = \"`cms_semester`\")public class Semester &#123;    @Id    @Column(name = \"`id`\")    @GeneratedValue(generator = \"JDBC\")    private Integer id;    @Column(name = \"`end_dat..."},{"date":"2018-08-13","title":"Ubuntu18.04 Mysql无法登录问题解决方案","url":"http://watermelon1gugu.github.io/2018/08/13/mysql-access-denied/","content":"BB重装ubuntu18.04后，安装mysql发现安装过程中没有出现设置root密码的过程，而后无法登录mysql，网上教程众说纷纭，但尝试后都没有效果。在尝试各种解决方案两天后终于解决了这个问题。\n\n解决方案（1）使用 sudo 权限进入数据库\n1sudo mysql -u root\n（2）删除原 root 用户\n1DROP USER &apos;root&apos;@&apos;localhost&apos;;\n（3）新建 root 用户并指定密码\n1CREATE USER &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;passwd..."},{"date":"2018-08-29","title":"ubuntu18.04安装opencv 3.4.1","url":"http://watermelon1gugu.github.io/2018/08/29/opencv/","content":"安装相关依赖12345678sudo apt-get install build-essentialsudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-devsudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev # 处理图像所需的包sudo apt-..."},{"date":"2018-08-16","title":"在SSM中使用mybatis-generator生成DAO层","url":"http://watermelon1gugu.github.io/2018/08/16/mybatis-generator/","content":"配置generatorConfigxml在maven工程中的resource中创建generatorConfig.xml\n文件内容如下\n\n123456789101112131415161718192021222324252627282930313233343536373839&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE generatorConfiguration PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\" \"http://mybat..."},{"date":"2018-09-03","title":"开发小问题及其解决方法","url":"http://watermelon1gugu.github.io/2018/09/03/small-problem/","content":"spring  Date类型格式化 \n\nspringboot 2.0 配置 spring.jackson.date-format 不生效\n\nmysql新建utf8格式数据库\n123456789101112CREATE DATABASE isdc DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;CREATE DATABASE 的语法：CREATE &#123;DATABASE | SCHEMA&#125; [IF NOT EXISTS] db_name[create_specification [, create_specification]..."},{"date":"2018-08-18","title":"pip Traceback (most recent call last) 解决方案","url":"http://watermelon1gugu.github.io/2018/08/18/pip-Traceback/","content":"问题描述12345678Traceback (most recent call last):  File \"/usr/bin/pip3\", line 11, in     sys.exit(main())  File \"/usr/lib/python3/dist-packages/pip/__init__.py\", line 215, in main    locale.setlocale(locale.LC_ALL, '')  File \"/usr/lib/python3.5/locale.py\", line 594, in setlocale    return _setlocale(ca..."},{"date":"2018-08-16","title":"构建SpringBoot+SpringMvc+Mybatis项目","url":"http://watermelon1gugu.github.io/2018/08/16/ssm/","content":"生成SpringBoot项目进入start.spring.io中构建项目\n选择需要的依赖后点击构建,会生成项目文件并下载。\n\n环境配置下载压缩包后解压并使用IDE打开文件，等待maven配置完成\n编辑application.properties打开src.main.resources中的application.properties文件，写入配置\n12345678910111213141516171819202122232425262728293031323334353637383940#修改为8888端口，不配置默认8080端口server.port=8888# 数据库访问配置# 主数据源，默..."},{"date":"2018-08-17","title":"使用Java8 stream处理集合","url":"http://watermelon1gugu.github.io/2018/08/17/stream/","content":"Java8 StreamJava 8 API添加了一个新的抽象称为流Stream，可以让你以一种声明的方式处理数据。Stream 使用一种类似用 SQL 语句从数据库查询数据的直观方式来提供一种对 Java 集合运算和表达的高阶抽象。\n\n什么是StreamStream（流）是一个来自数据源的元素队列并支持聚合操作\n\n元素是特定类型的对象，形成一个队列。 Java中的Stream并不会存储元素，而是按需计算。\n数据源 流的来源。 可以是集合，数组，I/O channel， 产生器generator 等。\n聚合操作 类似SQL语句一样的操作， 比如filter, map, reduce, find..."},{"date":"2019-11-02","title":"C++ wcout的奇妙问题","url":"http://watermelon1gugu.github.io/2019/11/02/wcout-problem/","content":"问题阐述\n\n大概就是\n12wchat_t s[3] = &#123;'a','b','c'&#125;;wcout&lt;&lt;s;\n会导致之后的其他输出都不会被输出\n问题排查这样的问题当然要从源码下手了\n首先查看其对应的&lt;&lt;重载函数\n\n可以看到其调用了__put_character_sequence()函数，传入了os、str和length(str)\n继续深入\n\n貌似在函数开头是对传入参数进行param check的代码，出于直觉（偷懒），直接对if结果进行断点调试。\n果不其然，原代码\n12345678if (__pad_and_output(_Ip(__os),       ..."},{"date":"2019-09-09","title":"浅析systemd","url":"http://watermelon1gugu.github.io/2019/09/09/systemd/","content":"参考文献《鸟哥的Linux私房菜》daemon与service\nservice是系统为了实现某些功能而必须要提供的一些服务。\n\nservice的提供总是需要程序的运行。所以达成这个service的程序称为daemon。\n\n比如达成循环型例行性工作调度服务（service）的程序 就是 crond这个daemon\n\n达成某个服务需要一支daemon在背景中运行，没有这支daemon就不会有service\n\ndaemon是一只程序(program)执行后的程序(process),通常daemon所处的原本程序(program)命名为{xxx}d.例如atd和crond\n\nsystemd的好处\n平行..."},{"date":"2018-08-21","title":"ubuntu使用小技巧(持续更新)","url":"http://watermelon1gugu.github.io/2018/08/21/tools/","content":"图片批量格式转换下边的命令将会一次性的讲当前文件夹下的所有bmp格式的图片修改为jpg格式12for i in *.bmp;do convert $&#123;i&#125; $&#123;i%bmp&#125;jpg;donerm -rf *.bmp\n\n一键安装依赖1apt --fix-broken install\n触摸板右键失灵问题1gsettings set org.gnome.desktop.peripherals.touchpad click-method areas\n安装jdk812345sudo add-apt-repository ppa:webupd8team/javasud..."},{"date":"2018-08-08","title":"Java volatile关键词使用与原理分析","url":"http://watermelon1gugu.github.io/2018/08/08/volatile/","content":"volatile的作用volatile提供了一种解决有序性与可见性问题的方案.并且保证单次读/写操作的原子性,比如long和double一类64位变量类型.\n实现可见性 可见性问题主要指一个线程修改了某共享变量值时,另一个线程无法立即看到.引起此类问题的主要原因是每个线程都拥有自己的一个cache即线程工作内存.使得线程可能不会在第一时间内将结果写入主存中.\n 例如以下例子.\n12345678910111213141516171819202122232425262728293031323334353637383940414243public class VolatileTest &#123; ..."},{"date":"2019-04-23","title":"春招复习笔记","url":"http://watermelon1gugu.github.io/2019/04/23/czfxbj/","content":"HTTP超文本传输协议，是一个基于请求与响应，无状态的，应用层的协议，常基于TCP/IP协议传输数据，互联网上应用最为广泛的一种网络协议,所有的WWW文件都必须遵守这个标准。设计HTTP的初衷是为了提供一种发布和接收HTML页面的方法。\n\nHTTP设置缓存Cache-Control:在响应头中设置，用于通知浏览器该资源需要被缓存。\n\nHTTPSHTTPS是在HTTP协议的基础上，增加了保密措施的一种协议。所以其主要作用是保证通信的安全，主要解决：\n\n防止第三方冒充服务器\n防止第三方拦截通信报文，窃取通信中请求报文，响应报文的内容\n防止第三方拦截通信报文，篡改报文内容\n\n加密内容\n对称加密算法：..."},{"date":"2018-10-16","title":"《后端架构师技术图谱》（转载)","url":"http://watermelon1gugu.github.io/2018/10/16/architect-awesome/","content":"数据结构\n队列\n集合\n链表、数组\n字典、关联数组\n栈\n树\n二叉树\n完全二叉树\n平衡二叉树\n二叉查找树（BST）\n红黑树\nB，B+，B*树\nLSM 树\n\n\nBitSet\n\n\n常用算法\n排序、查找算法\n选择排序\n冒泡排序\n插入排序\n快速排序\n归并排序\n希尔排序\n堆排序\n计数排序\n桶排序\n基数排序\n二分查找\nJava 中的排序工具\n\n\n布隆过滤器\n字符串比较\nKMP 算法\n\n\n深度优先、广度优先\n贪心算法\n回溯算法\n剪枝算法\n动态规划\n朴素贝叶斯\n推荐算法\n最小生成树算法\n最短路径算法\n\n\n并发\nJava 并发\n多线程\n线程安全\n一致性、事务\n事务 ACID 特性\n事务的隔离级别\nMVCC\n\n\n锁\n..."}],"timestamp":1572630880477}